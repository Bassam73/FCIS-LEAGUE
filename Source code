#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<iomanip>


using namespace std;

// global variables//

const int NUM_TEAMS = 20;

const int NUM_ROUNDS = 19;

const int MAX_TEAMS = 20;

const int MAX_PLAYERS_PER_TEAM = 34;

bool start = 0;

bool DataEntered = false;

bool RoundPlayed[19] = { 0 };

struct Date {
	int day;
	int month;
	int year;
};


struct Player {
	int id;
	string name, nation;
	Date birthdate;
};

struct Team {
	string name;
	Player players[34];
	int points[20] = { 0 };
	int GD[20] = { 0 };
	int id;
}T;

struct Result {

	int Id;
	int TeamHomeGoals;
	int TeamAwayGoals;

}R;

struct Matches
{
	int ID[190] = { 0 };
	string TeamHome[190];
	string TeamAway[190];
	int Results[190][2] = { 0 };
}mtch;

struct League
{
	Team team[20];
	Matches matches[190];
	/*Table Struct*/
} FCIS;







//functions
void ADMIN();
void User();
void Aregister();
void Alogin();
void TeamData();
void generate();
void Usignup();
void Ulogin();
void Afunctions();
void startseason();
void res(int i);
void table(int i);
void Logout();
/////////////////////////////////////////////////////////////////////////////////////////////////



//main fuctions for admin and user
int main()
{
	//Select user or admin
	cout << "\t\t\t ------------------ Welcome to FCIS League----------------- \t\t\t" << endl;
	cout << "Please Select ADMIN Or User" << endl;
	cout << "1- ADMIN" << endl;
	cout << "2- User" << endl;
	//Process
	int ADMINorUSER;
	cin >> ADMINorUSER;
	switch (ADMINorUSER)
	{
	case 1:
		ADMIN();
		break;
	case 2:
		User();
		break;
	default:
		system("cls");
		cout << "please choose 1 or 2 \n";
		main();
		break;
	}
}
void ADMIN()
{
	int AloginorAregister;
	cout << " ----------------- MAIN MENU ------------------\n";
	cout << "choose 1 or 2 \n";
	cout << "1- register \n";
	cout << "2- login \n";
	cin >> AloginorAregister;
	switch (AloginorAregister)
	{
	case 1:
		Aregister();
		break;
	case 2:
		Alogin();
		break;
	default:
		system("cls");
		cout << "Please select 1 or 2" << endl;
		ADMIN();
		break;
	}
}

void User()
{
	int UserVariable;

	cout << "\t\t\t-------------Welcome to User-------------\t\t\t\n";
	cout << "Please select 1 or 2 \n";
	cout << "1-Register\n";
	cout << "2-Login\n";
	cin >> UserVariable;
	switch (UserVariable)
	{
	case 1:
		Usignup();
		break;
	case 2:
		Ulogin();
		break;
	default:
		system("cls");
		User();
		break;
	}
}


/////////////////////////////////////////////////////////////////////////////////////////////////



//Admin Register And login

void Aregister()
{
	string Ausername, Apassowrd;
	cout << "--------------------------------------------------------------------------------------------\n";
	cout << " Enter the username : ";
	cin >> Ausername;
	cout << " Enter the password : ";
	cin >> Apassowrd;
	ofstream f1("records.txt", ios::app);
	f1 << Ausername << ' ' << Apassowrd << endl;
	system("cls");
	cout << "you have registered successfully\nLogin now with your account";
	ADMIN();
}

void Alogin()
{
	bool count = 0;
	string Ausername, Apassowrd, Aemail, id, password;
	cout << "--------------------------------------------------------------------------------------------\n";
	cout << "Enter the username : ";
	cin >> Ausername;
	cout << "Enter the password : ";
	cin >> Apassowrd;
	ifstream input("records.txt");

	while (input >> id >> password)
	{
		if (id == Ausername && password == Apassowrd)
			count = 1;
	}
	if (count == 1)
	{
		system("cls");
		cout << "You logged in successfully\n";
		Afunctions();
	}
	else
	{
		system("cls");
		cout << "Please check your information\n";
		ADMIN();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////

// User Register And Login /

void Ulogin()
{
	int count{};
	string email2, password2, emailz, passwordz;
	cout << "\t\t\t ------------------FCIS League----------------- \t\t\t" << endl;
	cout << "please enter email and password :" << "\n";
	cin >> email2 >> password2;
	ifstream input("UserSignup.txt");
	while (input >> emailz >> passwordz)
	{
		if (email2 == emailz && password2 == passwordz)
		{
			count = 1;
			system("cls");
		}
		input.close();
		if (count == 1)
		{
			cout << "login succesful" << "\n";
			main();
		}
		else {
			cout << "LOGIN FAILED, TRY AGAIN" << "\n";
			Ulogin();
		}

	}
}

void Usignup()
{
	string firstname, lastname, fullname, emailaddress, password, password_check;
	cout << "please enter your first name :\t"; cin >> firstname; cout << "\n";

	cout << "please enter your last name : \t"; cin >> lastname; cout << endl;

	fullname = firstname + " " + lastname;
	cout << "welcome " << fullname << "\n";
	cout << "please enter your email address :" << "\n";
	cin >> emailaddress;
	cout << "please enter your password :" << "\n";
	cin >> password;
	ofstream f1("UserSignup.txt", ios::app);
	f1 << emailaddress << ' ' << password << "\n";
	cout << "please confirm your password :" << "\n";
	cin >> password_check;
	for (int i = 0; i < 2; i++)
	{
		if (password == password_check)
		{
			cout << "signup succsesful" << "\n";
			cout << "welcome to FCIS league" << "\n";
			User();
			break;
		}
		else {

			cout << "please try again :" << "\n";
		}
		cin >> password_check;
	}

}
////////////////////////////////////////////////////////////////////////////////
//ADMIN FUNCTIONS
void Afunctions() {
	for (int i = 0; i < 1000; i++)
	{

		int choice;
		cout << " select \n";
		if (start == 0)
		{
			cout << "1-Enter teams and players " << endl;
			cout << "2-Generate Matches " << endl;
			cin >> choice;
			cout << "--------------------------------------------------------------------------------------------\n";
		}
		else if (start == 1)
		{
			cout << "1-Enter teams and players " << endl;
			cout << "2-Generate Matches " << endl;
			cout << "3-Continue the season " << endl;
			cout << "4-logout\n";
			cin >> choice;
			cout << "--------------------------------------------------------------------------------------------\n";

		}
		if (choice == 1)
		{
			TeamData();
			DataEntered = true;
		}
		if (choice == 2 && DataEntered)
		{
			generate();
			startseason();
		}
		if ((choice == 2 || choice == 3) && !DataEntered)
		{
			cout << " enter team data first \n";
			cout << "--------------------------------------------------------------------------------------------\n";

		}
		if (choice == 3)
		{
			startseason();
		}
		if (choice == 4)
		{
			Logout();

		}
	}
}

void TeamData()
{

	for (int i = 0; i < 20; i++)
	{
		cout << "Enter the name of team " << i + 1 << ": ";
		cin >> FCIS.team[i].name;
		cout << "Enter names , birthdates and nations of the players in team " << i + 1 << ":" << endl;
		for (int j = 0; j < 34; j++) {
			cout << "Enter player " << j + 1 << " name: ";
			cin >> FCIS.team[i].players[j].name;
			cout << "Enter player " << j + 1 << " nation: ";
			cin >> FCIS.team[i].players[j].nation;
			cout << "Enter player " << j + 1 << " birthdate (day / month / year): ";
			cin >> FCIS.team[i].players[j].birthdate.day;
			cin >> FCIS.team[i].players[j].birthdate.month;
			cin >> FCIS.team[i].players[j].birthdate.year;

		}
		
	}
	ofstream file;
	file.open("teams.txt");
	file << 20 << endl;
	for (int i = 0; i < 20; i++)
	{
		file << FCIS.team[i].name << endl;
		file << 34 << endl;
		for (int j = 0; j < 34; j++) {
			file << FCIS.team[i].players[j].name << endl;
			file << FCIS.team[i].players[j].nation << endl;
			file << FCIS.team[i].players[j].birthdate.day << " "
				<< FCIS.team[i].players[j].birthdate.month << " "
				<< FCIS.team[i].players[j].birthdate.year << endl;
			file << '\n';
		}
		file << '\n';
	}
	file.close();
}

void generate()
{
	int NUM_ROUNDS = 19;
	string teams[NUM_TEAMS];
	int id = 1;
	ofstream file;
	file.open("matches.txt");
	for (int i = 0; i < NUM_TEAMS; i++)
	{
		teams[i] = FCIS.team[i].name;
	}

	for (int round = 0; round < NUM_ROUNDS; round++)
	{
		cout << "Round " << round + 1 << ":\n";
		int counter = 0, time = 4;
		for (int i = 0; i < NUM_TEAMS / 2; i++)
		{
			mtch.TeamHome[id - 1] = teams[i];
			mtch.TeamAway[id - 1] = teams[NUM_TEAMS - i - 1];
			cout << "match " << id << ": " << mtch.TeamHome[id-1] << " vs " << mtch.TeamAway[id-1] << "   " << time << "PM\n";
			file << "match " << id << ": " << mtch.TeamHome[id-1] << " vs " << mtch.TeamAway[id-1] << "   " << time << "PM\n";
			mtch.ID[id - 1] = id;
			counter++;
			if (counter >= 3 && counter < 6)
			{
				time = 6;
			}
			else if (counter == 6)
			{
				time = 8;
			}
			id++;
		}
		cout << "----------------\n";
		file << "----------------\n";
		rotate(teams + 1, teams + NUM_TEAMS - 1, teams + NUM_TEAMS);

	}
}



void startseason()
{
	
	memset(mtch.Results, -1, sizeof(mtch.Results) * 190 * 2);
	start = 1;
	cout << "Do You want to start or continue the season?\ny/n\n";
	char ans = 'y';
	cin >> ans;
	if (ans == 'y')
	{
		system("cls");
		int resume = 1;
		int rounds, id = 0, i = 0;
		for (int i = 0; i < NUM_ROUNDS; i++)
		{
			if (RoundPlayed[i] == 0)
			{
				rounds = i + 1;
				break;
			}
		}
		ofstream file;
		
		while (true)
		{
			file.open("results.txt");
			cout << "Round " << rounds << '\n';
			for (i = rounds * 10 - 10; i < rounds * 10; i++)
			{
				if (mtch.Results[i][0] != -1 && mtch.Results[i][1] != -1)
					cout << "match " << mtch.ID[i] << ": " << mtch.TeamHome[i] << ' ' << mtch.Results[i][0] << " vs " << mtch.Results[i][1] << ' ' << mtch.TeamAway[i] << '\n';
				else
					cout << "match " << mtch.ID[i] << ": " << mtch.TeamHome[i] << " vs " << mtch.TeamAway[i] << '\n';
			}
			cout << "____________________________\n";
			if (rounds != 20)
			{
				cout << "Enter round results:\n";
				for (int j = rounds * 10 - 10; j < rounds * 10; j++)
				{
					res(j);
					system("cls");
					cout << "Round " << rounds << '\n';
					for (int z = rounds * 10 - 10; z < rounds * 10; z++)
					{
						if (mtch.Results[z][0] != -1 && mtch.Results[z][1] != -1)
						{
							cout << "match " << mtch.ID[z] << ": " << mtch.TeamHome[z] << ' ' << mtch.Results[z][0] << " vs " << mtch.Results[z][1] << ' ' << mtch.TeamAway[z] << '\n';						
						}
						else
						{
							cout << "match " << mtch.ID[z] << ": " << mtch.TeamHome[z] << " vs " << mtch.TeamAway[z] << '\n';
						}			
					}
					cout << "____________________________\n";
				}
				
				for (int x = 1; x <= rounds; x++)
				{
					file << "round" << x << '\n';
					for (int z = x * 10 - 10; z < x * 10; z++)
					{
						if (mtch.Results[z][0] != -1 && mtch.Results[z][1] != -1)
						{
							file << "match " << mtch.ID[z] << ": " << mtch.TeamHome[z] << ' ' << mtch.Results[z][0] << " vs " << mtch.Results[z][1] << ' ' << mtch.TeamAway[z] << '\n';
						}
						else
						{
							file << "match " << mtch.ID[z] << ": " << mtch.TeamHome[z] << " vs " << mtch.TeamAway[z] << '\n';
						}
					}
					file << "____________________________\n";
				}
				table(rounds);
				RoundPlayed[rounds - 1] = 1;
				file.close();
			}
			else
			{
				cout << "The season has finished\n";
				break;
			}
			rounds++;
			int x;
			cout << " DO YOU WANT TO CONTINUE OR BACK TO MAIN MENU \n";
			cout << "1- CONTINUE \n";
			cout << "2- Main Menu \n";
			cin >> x;
			switch (x)
			{
			case 1:
				continue;
				break;
			case 2:
				Afunctions();
				break;

			}	
		}
	}
}


void res(int i)
{

	cout << "match" << i + 1 << ": " << mtch.TeamHome[i] << " vs " << mtch.TeamAway[i] << '\n';

	cout << mtch.TeamHome[i] << " scored: ";
	cin >> R.TeamHomeGoals;

	cout << mtch.TeamAway[i] << " scored: ";
	cin >> R.TeamAwayGoals;
	mtch.Results[i][0] = R.TeamHomeGoals;
	mtch.Results[i][1] = R.TeamAwayGoals;

}




void table(int i)
{
	string teams[NUM_TEAMS];
	for (int i = 0; i < NUM_TEAMS; i++)
	{
		teams[i] = FCIS.team[i].name;
	}
	for (int j = i * 10 - 10; j < i * 10; j++)
	{
		if (mtch.Results[j][0] > mtch.Results[j][1])
		{
			for (int z = 0; z < NUM_TEAMS; z++)
			{
				if (teams[z] == mtch.TeamHome[j])
				{
					T.points[z] += 3;
					T.GD[z] += mtch.Results[j][0] - mtch.Results[j][1];
					break;
				}
			}
			for (int z = 0; z < NUM_TEAMS; z++)
			{
				if (teams[z] == mtch.TeamAway[j])
				{
					T.GD[z] += mtch.Results[j][1] - mtch.Results[j][0];
					break;
				}
			}

		}
		else if (mtch.Results[j][0] < mtch.Results[j][1])
		{
			for (int z = 0; z < NUM_TEAMS; z++)
			{
				if (teams[z] == mtch.TeamAway[j])
				{
					T.points[z] += 3;
					T.GD[z] = mtch.Results[j][1] - mtch.Results[j][0];
					break;
				}
			}
			for (int z = 0; z < NUM_TEAMS; z++)
			{
				if (teams[z] == mtch.TeamHome[j])
				{
					T.GD[z] += mtch.Results[j][0] - mtch.Results[j][1];
					break;
				}
			}
		}
		else if (mtch.Results[j][0] == mtch.Results[j][1])
		{
			for (int z = 0; z < NUM_TEAMS; z++)
			{
				if (teams[z] == mtch.TeamHome[j])
				{
					T.points[z] += 1;
					break;
				}
			}
			for (int z = 0; z < NUM_TEAMS; z++)
			{
				if (teams[z] == mtch.TeamAway[j])
				{
					T.points[z] += 1;
					break;
				}
			}
		}

	}
	for (int i = 0; i < NUM_TEAMS; i++)
	{
		for (int j = NUM_TEAMS - 1; j >= 0; j--)
		{
			if (i != j)
			{
				if (T.points[i] < T.points[j] && i < j)
				{
					swap(teams[i], teams[j]);
					swap(T.points[i], T.points[j]);
					swap(T.GD[i], T.GD[j]);
				}
				else if (T.points[i] == T.points[j])
				{
					if (T.GD[i] < T.GD[j] && i < j)
					{
						swap(teams[i], teams[j]);
						swap(T.points[i], T.points[j]);
						swap(T.GD[i], T.GD[j]);
					}
				}
			}
		}
	}
	ofstream file;
	file.open("table.txt");
	for (int i = 0; i < NUM_TEAMS; i++)
	{
		cout << i + 1 << "-" << left << setw(20) << teams[i] << '\t' << T.points[i] << '\t' << T.GD[i] << '\n';
		file << i + 1 << "-" << left << setw(20) << teams[i] << '\t' << T.points[i] << '\t' << T.GD[i] << '\n';
	}
	file.close();
}



void Logout() {
	system("cls");
	main();
}


